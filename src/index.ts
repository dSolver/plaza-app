import { app, BrowserWindow } from 'electron';

import { addTab, relayout, setupControlView } from './Pages/Control/Control';


// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const CONTROLS_UI_WEBPACK_ENTRY: string

declare const CONTROLS_UI_PRELOAD_WEBPACK_ENTRY: string

declare const DIRECTORY_WINDOW_WEBPACK_ENTRY: string

declare const DIRECTORY_WINDOW_PRELOAD_WEBPACK_ENTRY: string

export const CONTROLS_UI_PRELOAD = CONTROLS_UI_PRELOAD_WEBPACK_ENTRY

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}


const height = 900;
const width = 1200;


const createWindow = async (): Promise<BrowserWindow> => {

  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: height,
    width: width,
    webPreferences: {
      backgroundThrottling: false,
      devTools: true
    }
  });


  mainWindow.once('ready-to-show', () => {
    console.log("Ready to show")
    mainWindow.show();
  })

  mainWindow.once('show', () => {
    console.log("Show")
  })


  return mainWindow;
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', async () => {
  const mainWindow = await createWindow()


  setupControlView(mainWindow, CONTROLS_UI_WEBPACK_ENTRY)

  addTab('main', 'Plaza', 'https://plaza.dsolver.ca')

  mainWindow.on('focus', (event: Electron.Event) => {
    console.log("Focus: ", event.target);
  })

  mainWindow.on('maximize', () => {
    relayout()
  })


  mainWindow.on('resize', () => {
    relayout()
  })

  mainWindow.focus()

  setTimeout(() => {

    mainWindow.maximize()
  }, 100)

});

app.on('browser-window-created', (event) => {
  console.log("Browser window created", event)

})

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
